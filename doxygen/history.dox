/**
@page history Revision History

@section qtools_7_0_0 Version 7.0.0, 2022-01-31

__Changes in QSpy__
- The QSpy 7.0.0 implementation has been re-factored to modularize it in order to better support building host-based applications for executing embedded code on the host. Specifically, the new QSpy design better separates the "QSpy parser" of the QS records from the rendering engine and from other functionality of the QSpy host application.
- Also, this release introduces semantic coloring of the @ref qspy "QSPY output", which improves its readability. This feature is now controlled by the added @ref qspy_command "command-line option" `-r<c0|c1|c2>`.

__Changes in QUTest__
- added command last_rec() to access the last received QS trace record.
- improved semantic coloring of the output.

__Changes in QCalc__
- added "batch mode" in which an expression can be provided on the command-line to `qcalc.py`.
- added semantic coloring of the output.

__Updated GNU-ARM Toolchain for Windows__
- The GNU-ARM toolchain included in QTools for Windows has been updated to the latest Version 10.3-2021.10 released on October 21, 2021.

__Updated Python for Windows__
- The Python interpreter included in QTools for Windows has been updated to Python 3.10.1 (32-bit).


@section qtools_6_9_3 Version 6.9.3, 2021-04-09

__Changes in QSpy__
- Moved function `QSPY_printInfo()` to `qspy.c`, to enable direct QSPY output to the console. Please see also discussion thread [QSPY to console in win32-qv and posix-qv ports] https://sourceforge.net/p/qpc/discussion/668726/thread/92e56e9480),


__Changes in QUTest__
- Corrected the @ref qutest_command "DEBUG mode", where the Enter key now correctly skips a test.
- Added new command include() and provided examples of its use.
- Improved error reporting from test scripts. Specifically, the content of the Python stack has been expanded to encompass all the relevant calls.


__Changes in QView__
- Modified the Python implementation to run correctly after [installing with pip](https://pypi.org/project/qview/).


__Changes in QWin__
- Modified the example code to correctly handle regular buttons alongside the "owner-drawn" buttons.


__Changes in QCalc__
- Modified the Python implementation to run correctly after [installing with pip](https://pypi.org/project/qcalc/).


__Updated Python for Windows__
- The Python interpreter in QTools for Windows has been updated to Python 3.9.4.



@section qtools_6_9_2 Version 6.9.2, 2021-01-18

__Changes in QUTest and QView__

The UDP socket binding (for connection to QSPY host application) has been changed from "localhost" to "0.0.0.0". This is to improve access to QSPY running on remote hosts. This fixes the following bug:

- [bug#283  QUTest 6.9.1. broken](https://sourceforge.net/p/qpc/bugs/283/).


__Changes in QView__

Changed the "Local Filter" dialog box to show "QS_id=..." instead of "AO-prio=..." for QS-IDs above 64.


__Added QCalc__

A new version of the popular QCalc Programmer's Calculator has been added again. This version is based on Python (whereas the previous was based on Tcl/Tk). The new version is console based and, among other enhancements, adds support for 64-bit range.


__Updated GNU-ARM Toolchain for Windows__

The GNU-ARM toolchain in QTools for Windows has been updated to the latest Version 10-2020-q4-major, released on December 11, 2020.


__Updated Python for Windows__

The Python interpreter in QTools for Windows has been updated to Python 3.9.


@section qtools_6_9_1 Version 6.9.1, 2020-09-28

The main purpose of this release is to adjust @ref qutest and @ref qview to the new @ref qs_local "QS Local Filter" design implemented in [QP/C](https://www.state-machine.com/qpc) and [QP/C++](https://www.state-machine.com/qpcpp) 6.9.1. Specifically, the loc_filter() and ao_filter() functions in @ref qutest_script "QUTest scripts" and in @ref qview_script "QView scripts" has been re-designed. Additionally, the @ref qview_loc "QView Local Filter menu" have been adjusted accordingly.

@note
The change in the loc_filter() command has implications for existing @ref qutest_script "QUTest scripts". Specifically, the parameters of loc_filter() are no longer object names but rather "QS-IDs" (see the documentation to loc_filter()).

__Changes in QSPY__

The @ref qspy "QSPY host application" has been updated to handle the redesigned local-filters and the new predefined #QS_QF_NEW_ATTEMPT trace record. Also the default version compatibility with the @ref qs "QS target-resident component" (the `-v` @ref qspy_command "command-line option") has been increased from 6.2 to 6.6.

Additionally, the QS_U64() and QS_I64() data elements have been made available for all types of CPUs, whereas previously they were available only on 64-bit CPUs (see also [feature#181](https://sourceforge.net/p/qpc/feature-requests/181)).

Additionally, QSPY now can format @ref qs_app "application-specific data elements" in hexadecimal. Here are a few examples of QS trace records in the Target and the generated QSPY output:

@code{c}
QS_U8(QS_HEX_FMT,  0xABU);  // --> 0xAB
QS_U16(QS_HEX_FMT, 0xDEADU);  // --> 0xDEAD
QS_U32(QS_HEX_FMT, 0xDEADBEEFU); // --> 0xDEADBEEF
QS_U64(QS_HEX_FMT, 0xDEADBEEF12345678LL); // --> 0xDEADBEEF12345678
@endcode


__Implemented Feature Requests__

- [feature#181 "use of QS_U64() on 32 bit machine"](https://sourceforge.net/p/qpc/feature-requests/181).


@section qtools_6_9_0 Version 6.9.0, 2020-08-21

This release brings the new @ref qview component, which replaces QSpyView written originally in Tcl/Tk. The new @ref qview "QView" is written in **Python** (3.3.+) and brings much commonality with the @ref qutest, which has also been re-structured and improved.

@note
Starting with this version, both @ref qview and @ref qutest require **Python3** (3.3+) and are **no longer compatible** with Python2. The support for Tcl/Tk has been dropped entirely in QTools.


__Changes in Directory Structure__

The new @ref qview "QView" and the updated @ref qutest "QUTest" components are now located directly under the `qtools` folder and are no longer in the `qtools\qspy` folder. Here is the new `qtools` directory structure:

@code{py}
qtools/
+---bin/
+---gnu_arm-none-eabi/
+---matlab/
+---mingw32/
+---Python38/
+---qclean/
+---qspy/
+---qutest/   # <== new qutest location
+---qview/    # <== new qview location
+---qwin/
+---Unity/
@endcode

@note
The changes in the QTools directory structure have impact on QUTest testing, because the Makefiles (or any other build tools you might be using) need to be adjusted to the new location of the `qutest.py` script.


__Changes in QSPY:__

- The @ref qspy "QSPY host utility" has been extended with @ref qspy_seq "Sequence Diagram Output". This new feature replaces the previous support for MscGen and is no longer reliant on any such external tools.

- QSPY now recognizes the new QS trace record #QS_QF_RUN.

@note
The #QS_QF_RUN record is now generated in @ref qutest "QUTest", which requires adjustments in existing @ref qutest_script "test scripts". Specifically, the test scripts that provide their own on_reset() callback must now also call expect_run().


__Bug Fixes:__

- [bug#153 QSPY Creating corrupt MscGen files](https://sourceforge.net/p/qpc/bugs/153/).


@section qtools_6_8_2 Version 6.8.2, 2020-07-17

- Changed the QS trace record name QS_QF_ACTIVE_POST_FIFO to ::QS_QF_ACTIVE_POST and QS_QF_EQUEUE_POST_FIFO to ::QS_QF_EQUEUE_POST. This refactoring now better matches the QP/C/C++ API QACTIVE_POST() and QEQueue_post().
- Fixed errors in the Doxygen documentation, such as: missing documentation for parameters, wrong parameter names, unresolved references, etc.
- Applied new, clearer styling to the Doxygen documentation.


@section qtools_6_8_1 Version 6.8.1, 2020-04-04

__Bug Fixes:__
- [bug#263 QSPY handles incorrectly empty strings ](https://sourceforge.net/p/qpc/bugs/263/).

Also, improved some comments in QUTest scripting documentation (qutest.py).



@section qtools_6_8_0 Version 6.8.0, 2020-03-21
- Adapted the QSPY host application to the changes in QP/C/C++ 6.8.0.
- Added color to the qutest.py Python script console output. Specifically, failing test scripts are shown in RED, while passing test scripts are shown in GREEN.



@section qtools_6_7_0 Version 6.7.0, 2019-12-30
This QTools release changes the build process for the QSPY, QCLEAN, and QFSGEN utilities on Windows. Specifically, these programs are now built using Visual Studio 2019 instead of the MinGW compiler for Windows. Also, the source code of all Quantum Leaps utilities has been reviewed and all "unsafe" calls to standard C library have been replaced with their "safe" counterparts (e.g., strcpy()->strcpy_s(), strcat()->strcat_s(),fprintf()->fprintf_s(), etc.) All these changes were made to avoid the malware warnings that were issued by some anti-virus software against executables built with MinGW.

This release also replaces the MinGW toolchain (8.2.0) with the latest mingw32 (9.2.0) installed with MSYS2 (see also https://sourceforge.net/p/qpc/discussion/668726/thread/06b89ba2d5/ ).

Finally, this release updates the QWIN Prototyping Toolkit (`qtools\qwin` directory) to work with the latest Visual Studio 2019 and specifically with the Resource Editor now available in VS 2019. The qwin-demo project has been updated to build with Visual Studio 2019.



@section qtools_6_6_0 Version 6.6.0, 2019-08-30
The main purpose of this release is the change in distribution of the QTools collection, which is now bundled together with the QP frameworks (QP/C, QP/C++ and QP-nano) as well as QM into "QP-bundle". This "QP-bundle" provides a single, streamlined and simplified download and installation of all QP frameworks and all the accompanying tools.

Also this release brings significant changes to QTools for Windows. Specifically, the locations of the MinGW compiler and Tcl/Tk have been changed to separate directories (as opposed to being co-located in the `qtools/bin` directory). This facilitates easier upgrades of these third-party tools, and indeed, they have been upgraded in this QTools/Windows release as follows:

- MinGW-32-bit **8.2.0**.
- Tcl/Tk **8.6**.

@note
The directory reorganization means that the MinGW compiler is no longer available in the `qtools/bin` directory and therefore the QTools installer for Windows adds to the PATH both the `qtools/bin` and `qtools/MinGW/bin` directories.

Also, this release makes the following changes to the @ref qspy "QSPY host application":

- The @ref qspy_command "command-line" defaults have been changed such that `qspy` is equivalent to the former `qspy -u -t`. In other words, QSPY by default opens the UDP port and opens the TCP/IP port for Target connection.
- The QSPY host application now supports a new QP-compatibility version 6.6.0, in which the @ref qs_app "Application-Specific QS Trace Records" start at offset 100 instead of 70. This is only activated with the `-v 660` @ref qspy_command "command-line" option, but is in preparation for the future changes in QP/C and QP/C++ frameworks (the upcoming QP/C/C++ 6.6.0).



@section qtools_6_5_1 Version 6.5.1, 2019-06-08
This release adds **debug mode** to @ref qutest_script "QUTest scripting" (in Python). Specifically, you can now provide a special value `DEBUG` to the `qutest.py` Python script launcher, in which case `qutest.py` will start in **debug mode**, in which it will **not** launch the host executable and will **not** reset the Target. Instead, `qutest.py` will wait for the Target reset and other responses from the Target.

Additionally, this release improves the @ref install_win32 "QTools installation on Windows". Specifically the Windows installer now installs Python and has been re-designed to automatically set up the `QTOOLS` environment variable and add `%QTOOLS%\bin;%QTOOLS%\python` to the PATH. The uninstaller reverses these changes.



@section qtools_6_4_0 Version 6.4.0, 2019-02-10
This release speeds up the QSPY host application by tweaking the timing constants in the TCP and UDP communication interfaces. The resulting QSPY 6.4.0 runs QUTest tests significantly faster (at least twice as fast) as before.



@section qtools_6_3_8 Version 6.3.8, 2018-12-31
The main purpose of this release is the update of the GNU-ARM toolchain (included in QTools for Windows) to the latest GCC 8. Specifically, this QTools release switches to the official [GNU-ARM Embedded Toolchain for Arm Cortex-M and Cortex-R processors maintained by ARM Ltd.](https://developer.arm.com/open-source/gnu-toolchain/gnu-rm).

@note
For consistency with the [GNU-ARM Embedded Toolchain](https://developer.arm.com/open-source/gnu-toolchain/gnu-rm), the toolchain is now located in the directory `qtools\gnu_arm-none-eabi` and contains tools with the prefix **arm-none-eabi-**. This is *different* from the GNU-ARM toolchain used previously (which was located in `qtools\gnu_arm-eabi` and used the tools prefix **arm-eabi-**). This change requires adjusting existing `Makefiles` and other build commands for the GNU-ARM toolchain, which has been done in the matching <b>QP/C/C++/nano release 6.3.8</b>.


Additionally, this release makes further improvements to the "qutest.py" Python interface. Specifically, the skip() command can now be used anywhere in the test scripts to skip the commands. (Previously, the skip() command could only legitimately be used just before the test() command).



@section qtools_6_3_7 Version 6.3.7, 2018-11-19
This release brings a completely re-designed and simplified Python interface for the @ref qutest "QUTest unit testing harness". Specifically, this release adds a new scripting engine called simply @ref qutest_script "qutest.py", which replaces the previous "qspypy".

@note
The new interface @ref qutest_script "qutest.py" is now the primary supported QUTest scripting interface. The older interfaces, such as TCL ("qutest.tcl") and "qspypy" are still provided in this release, but they are considered *obsolete* and are **not recommended** for writing new test scripts.


The new @ref qutest_script "qutest.py Python interface" is a simple single-threaded application that no longer requires PyTest or other such external Python packages, as did "qspypy" previously. The new Python interface is now also compatible with both Python 2 (2.7+) and Python 3 (3.4+), which means that virtually any contemporary Python version without extensions can be used for running QUTest Python scripts.

@note
The new Python interface "qutest.py" implements a **different** (simpler) structure of @ref qutest_script "QUTest test scripts" than "qspypy" before. Examples of the new Python @ref qutest_tut "test scripts" are provided in the matching <b>QP/C/C++ release 6.3.7</b>.


Additionally, this release fixes the problem in the @ref "QSPY host utility" to correctly format signed integers (I8, I16, I32), which didn't work correctly on 64-bit Linux platforms. Also, the QSPY utility on Windows now uses the newer Windows socket library "ws2_32", which replaced the old "wsock32".

Finally, the QTools release for Windows updates the provided MinGW GNU-C/C++ compiler to version 6.3.0.



@section qtools_6_3_6 Version 6.3.6, 2018-10-03
The main purpose of this release is to improve @ref qutest "QUTest" support. Specifically, this release adds a feature of querying and reporting the status of the @ref current_obj() "current objects", such as the current State-Machine (SM), Active-Object (AO), current Memory-Pool (MP), current Event-Queue (EQ), and current Time-Event (TE). The feature impacts the following facilities:

- the @ref qspy "QSPY host utility" now processes the new #QS_QUERY_DATA packet
- the QUTest **Tcl** scripting implements the new command command `query_curr()`
- the QUTest **Python** scripting implements the new command command `qutest.query_curr()`.

@note
This feature requires matching QP/C/C++ <b>6.3.6</b>.


Also, the following bugs related to Python scripting have been fixed in the @ref qtools_qspypy "qspypy 6.3.6" included in this release:

- [bug#224 QUTest/Python implementation of qutest.expect() is incomplete](https://sourceforge.net/p/qpc/bugs/224). This improved `qutest.expect()` implementation more closely matches the behavior of the `expect()` directive from Tcl scripting. The modified `qutest.expect()` compares correctly the `%timestamp` fields (as opposed to ignoring them) and also handles special character sequences '?', '*', and [chars] (like the Tcl `string match` command).

- [bug#225 QUTest/Python ignores the Target-info configuration](https://sourceforge.net/p/qpc/bugs/225).

- [bug#223 QUTest/Python hangs when attaching to QSPY fails](https://sourceforge.net/p/qpc/bugs/223).


@note
If you already have the previous version of @ref qtools_qspypy "qspypy", you need to re-install it by means of the following command:<br>
<br>
`pip install %%QTOOLS%\qspy`


Finally, this release of the QTools collection contains the [Unity unit testing harness (framework)](https://github.com/ThrowTheSwitch/Unity).



@section qtools_6_3_4 Version 6.3.4, 2018-08-16
This release adds official support for writing QUTest test scripts in Python.
Also, this release fixes some minor typos in error messages generated by QSpy.



@section qtools_6_3_1 Version 6.3.1, 2018-05-24
This minor release corrects the QSPY utility. Specifically, the @ref qs_app "application-specific output" from the macros QS_FUN(), QS_OBJ() and QS_SIG() contained extra space (' ') before the function/object/signal name. This extra space has been now removed.

@note
The change might impact existing QUTest test scripts which parse the QS_FUN(), QS_OBJ() or QS_SIG() output.

@note
The corrected QS_FUN(), QS_OBJ() and QS_SIG() output (without the extra space) is assumed in the QUTest examples that ship in QP/C/C++ 6.3.1.



@section qtools_6_3_0 Version 6.3.0, 2018-05-10
This release simplifies the usage of the QUTest (qutest.tcl) and QSpyView (qspyview.tcl) utilities by reducing the number of parameters required by these scripts. Specifically, the "local_port" parameter might now be omitted and still every instance of qutest.tcl / qspyview.tcl will be given a unique local UDP port. Additionally, the "port" parameter has been combined with the "host" parameter in the form host[:port].

Here is the new usage of the qutest.tcl script:
@code
tclsh qutest.tcl [test-scripts] [host_exe] [host[:port]] [local_port]
@endcode

Here is the new usage of the qspyview.tcl script:
@code
wish qspyview.tcl [extension_script] [host[:port]] [local_port]
@endcode

For example, to attach to QSPY running on the host 192.168.1.100 and port 7705, you now can launch these scripts as follows:

@code
tclsh qutest.tcl *.tcl test_fixture.exe 192.168.1.100:7705
wish qspyview.tcl dpp.tcl 192.168.1.100:7705
@endcode

Modified files:
- qspy.tcl
- qspyview.tcl
- qutest.tcl.

Also, this release adds the LMFlash utility to QTools for Windows for flash programming of TM4C MCUs.

@note
The changes should be transparent for most existing QSpyView and QUTest projects (this includes all examples shipped in QP/C and QP/C++). However, projects that run QSPY at non-default UDP ports might need to be adjusted.



@section qtools_6_2_0 Version 6.2.0, 2018-03-13
This release updates the QSPY host utility as well as the `qutest.tcl` and `qspyview.tcl` scripts for the following new QS records introduced in QP/C/C++ 6.2.0:

- #QS_QF_ACTIVE_DEFER (replaces QS_QF_ACTIVE_ADD)
- #QS_QF_ACTIVE_RECALL (replaces QS_QF_ACTIVE_REMOVE)
- #QS_QF_ACTIVE_RECALL_ATTEMPT (replaces QS_QF_EQUEUE_INIT)
- QS_QF_RESERVED2 (replaces QS_QF_MPOOL_INIT)
- #QS_QF_NEW_REF (replaces QS_QF_TIMEEVT_CTR)
- #QS_MUTEX_LOCK (replaces QS_QF_RESERVED1)
- #QS_MUTEX_UNLOCK (replaces QS_QF_RESERVED0).

The global filter settings in the `qutest.tcl` and `qspyview.tcl` scripts have been updated to the augmented and re-organized QS trace records.

Additionally, the new commands post() and publish() have been added to the QUTest "testing DSL" (`qutest.tcl` script). Examples of use of these new commands are provided in the QP/C/C++ directory `<qpc|qpcpp>\examples\qutest\defer\`.



@section qtools_6_1_1 Version 6.1.1, 2018-02-06
This release fixes the following bug in QSPY:

- [bug#202 QSPY 6.1.0 fails to report target communication errors](https://sourceforge.net/p/qpc/bugs/202).

Additionally, this release simplifies the format of the external dictionary files, so that they can potentially be generated from .map files or .elf files. The new format no longer requires storing the number of entries in the dictionary and the entries don't need to be sorted by the key-value. The new dictionary format also allows adding comments and empty lines between the dictionary blocks.

Additionally, the QSPY for POSIX (Linux, MacOS, etc.) corrects the problem with reading input from a file (-f[bin_file] command-line option).

Finally, this release increases the QCLEAN maximum size limit to 10MB per file.



@section qtools_6_1_0 Version 6.1.0, 2018-01-20
This release improves the @ref qspy_command "QSPY command-line" option processing by allowing option parameters to be separated by spaces from the option letter (including the optional parameters). For example, the following command-line would not work in the previous version, but will work now:

qspy -t 6602

At the same time, the option parameters can follow immediately the option letter, so the following command line will work as well (backwards compatiblity):

qspy -t6602

This release also improves the handling of external dictionary files in @ref qspy "QSPY host application". Specifically, the `-d` @ref qspy_command "command-line option" has been extended to allow no parameter, in which case an external dictionary file is opened automatically as soon as QSPY receives the target reset or target information. When the `-d <file>` option is used, the provided dictionary file is used right away, but the dictionary information might get discarded when the target information does not match the configuration and time-stamp obtained from the dictionary file.



@section qtools_6_0_3 Version 6.0.3, 2017-12-12
Fixed compilation and linkage on MacOS for qspy, qclean, qfsgen.

Fixed [bug#180 qspyview.tcl for peek is not in sync with the qs_rx parsing of peek](https://sourceforge.net/p/qpc/bugs/180/).

Used unsigned integer math in qcalc.tcl.

In QTools for Windows, updated the GNU-ARM toolchain to the latest available GCC 7.2.0 adapted from SysProgs Prebuilt GNU toolchain for arm-eabi:

http://gnutoolchains.com/arm-eabi/.



@section qtools_5_9_3 Version 5.9.3, 2017-07-04
Fixed bug#175 "QS_QF_ACTIVE_GET & QS_QF_EQUEUE_GET Record Mislabeled in
QSPY Output" (https://sourceforge.net/p/qpc/bugs/175/ ).

Added bin/qcalc.tcl to the GIT repository (so that it shows up on GitHub).



@section qtools_5_9_1 Version 5.9.1, 2017-05-19
Added the GNU-ARM (EABI) toolset to the QTools Collection for Windows in the directory `qtools/gnu_arm-eabi`. The addition of the GNU-ARM toolset matches the changes made to Makefiles in QP/C/C++/nano 5.9.2.

To reduce the size of the QTools for Windows download, the self-extracting archive file `qtools_win32_<ver>.exe` has been prepared with the 7-Zip utility.



@section qtools_5_9_0 Version 5.9.0, 2017-05-19
This release adds the @ref qutest "QUTest" (pronounced 'cutest') Unit Testing support to QP/Spy software tracing. Specifically, this release adds a new head-less (console-based) QSPY front-end, which runs unit tests.

This release also adapts the @ref qspy "QSPY" host utility to support @ref qutest "QUTest" unit testing. Several new commands have been added and the structure of the code has been expanded.

Also, the @ref qspyview "QSpyView" Visualization extension has been moved to the tcl\ sub-directory (the Tcl script tcl\qspyview.tcl).

The other Quantum Leaps utilities, like @ref qclean "QClean", @ref qfsgen "QFSGen", and QCalc, have been updated and greatly improved.

Finally, all utilities in the QTools collection have been documented in the new QTools Manual, available online at
https://www.state-machine.com/qtools.



@section qtools_5_7_0 Version 5.7.0, 2016-09-08
Corrected the QSPY software tracing host application to properly display floating point numbers in user-defined trace records (QS_F32() and QS_F64() macros). The problem was incompatibility between Microsoft VC++ and GCC floating-point format specifications. In the GCC software build (which produces the QSPY executable in the qtools/bin directory), the MS-VC++ floating point format resulted in all zeros (e.g., 0.0000e+000).



@section qtools_5_6_4 Version 5.6.4, 2016-05-04
Added <a target="_blank" class="extern" href="https://www.state-machine.com/products/#QWIN">QWIN GUI</a> to the collection (sub-directory qwin_gui).

Updated the QSPY software tracing host application for the QS trace record name changes introduced in QP 5.6.2.



@section qtools_5_5_0 Version 5.5.0, 2015-08-21
Extended the QSPY software tracing host application for **bi-directional** communication with embedded targets (output and *input* into the target). Added a @ref qspy_udp "UDP socket" to QSPY, as an extensibility mechanism for adding external unit testing, GUIs and other "front-ends" to control the embedded targets.

Provided new QSpyView Tcl/Tk extension of the QSPY host application for control testing, and visualization of the real-time tracing data from embedded targets at real-time. QSpyView enables developers to rapidly build both GUI-based and "headless" scripts for their specific applications (see https://www.state-machine.com/qpc/arm-cm_dpp_ek-tm4c123gxl.html).



@section qtools_5_3_1 Version 5.3.1, 2014-04-21
Corrected the version representation from hex to decimal, to match the change in the QP framework. The version representation missmatch caused problems in parsing newly modified trace records, when the qspy.c implementation was inserted directly into the projects.



@section qtools_5_3_0 Version 5.3.0, 2014-03-31
Added new trace records to the QSPY host application: QS_QEP_TRAN_HIST, QS_QEP_TRAN_EP, and QS_QEP_TRAN_XP. Changed labels for standard records from Q_ENTRY, Q_EXIT, Q_INIT to ENTRY, EXIT, INIT.



@section qtools_5_1_1 Version 5.1.1, 2013-10-15
Fixed the bug in the QSPY host application, which didn't handle
correctly object/functions/signal names longer than 32 characters. The name limit has been raised to 64 characters and this version also correctly truncates the names at the limit without printing any garbage characters.



@section qtools_5_1_0a Version 5.1.0a, 2013-09-18
Modified QSPY utility to support changes in QP 5.1.x:

-improved handling of target resets by adding an empty QS record
 before the QS_QP_RESET record. The empty record provides the frame
 delimiter in case the last record in incomplete, so that the
 following QS_QP_RESET record can be recognized.

-improved handling of internal object/function/signal dictionaries
 so that symbolic information is displayed for all occurrences of an
 object/function/signal, for which a dictionary record was received.



@section qtools_5_0_0a Version 5.0.0a, 2013-09-08
Modified the QSPY utility to support changes in QP 5.0.x:

-modified the standard trace records QS_QF_TICK and QS_QF_TIMEEVT_* to contain the tick-rate number.

-added trace records QS_TEST_RUN and QS_TEST_FAIL for unit testing.

-added version compatibility level 5.0, whereas specifying version
 -v 4.5 runs qspy in compatibility mode with QP 4.5.x.

-added Find And Replace Text (FART) utility for Windows.



@section qtools_4_5_02 Version 4.5.02, 2012-07-21
Re-designed the QSPY interface to support more flexible parsing
of the trace records in desktop-based simulations (such as Windows
or Qt). Users can provide a custom parsing callback function to
QSPY_config(). Also added QS_RESET() macro to reset the internal
dictionaries (and other cleanup in the future) when the target
resets.



@section qtools_4_5_01 Version 4.5.01, 2012-06-25
Added the QS_USR_DICTIONARY() entry for storing dictionaries of
the user trace records. Replaced all remaining sprintf() calls
with snprintf().



@section qtools_4_5_00 Version 4.5.00, 2012-05-26
Re-designed the implementation of the QSPY host application, so that it can be convenienty included as part of the QP library. This allows direct QS tracing output to the screen for QP applications running on the desktop. The QSPY application has been converted from C++ to plain C for easier integration with QP/C.



@section qtools_4_3_00 Version 4.3.00, 2011-11-03
This QSPY version matches the changes to the critical section macros made in QP 4.3.00. The QS record names QS_QF_INT_LOCK and QS_QF_INT_UNLOCK have been replaced with QS_QF_CRIT_ENTRY and QS_QF_CRIT_EXIT, respectively.



@section qtools_4_2_04 Version 4.2.04, 2011-09-27
This QSPY version fixes the bug of incorrect reporting function
or object pointers for which the dictionary records are not
provided and which are repeated in one format line (bug #3405904).
For example, trace record AO.FIFO would report (incorrectly) as
follows:

0014004078 AO.FIFO: Sndr=200009B4 Obj=200009B4
Evt(Sig=00000009,Obj=200009B4, Pool= 0, Ref= 0)
Queue(nFree=  5, nMin=  5)

The Sndr= and Obj= are reported to be the same, but they were not.



@section qtools_4_2_01 Version 4.2.01, 2011-08-01
This QSPY version adds generation of sequence diagrams as files to be processed by MscGen (www.mcternan.me.uk/mscgen/). This version adds the option -g<msc_file> to generate a .msc file.

Also, this version of QSPY for Windows allows COM ports larger than COM9.



@section qtools_4_2_00 Version 4.2.00, 2011-07-13
This QSPY version matches the changes made to QS target code in
QP/C/C++ 4.2.xx. These changes include sending the additional byte
of sender priority in trace records:

- QS_QF_ACTIVE_POST_FIFO,
- QS_QF_ACTIVE_POST_LIFO.

Additional changes include sending the poolID and refCtr of events
in two bytes instead of just one byte. The changes affect the
following trace records:

- QS_QF_ACTIVE_POST_FIFO,
- QS_QF_ACTIVE_POST_LIFO,
- QS_QF_ACTIVE_GET,
- QS_QF_EQUEUE_GET,
- QS_QF_ACTIVE_GET_LAST,
- QS_QF_EQUEUE_GET_LAST,
- QS_QF_EQUEUE_POST_FIFO,
- QS_QF_EQUEUE_POST_LIFO,
- QS_QF_PUBLISH,
- QS_QF_GC_ATTEMPT, and
- QS_QF_GC.

Also, for compatibility with QP 4.2.xx, this version changes
the defaults as follows:

signal size (-S) from 1 byte to 2 bytes, and

baud rate (-b) from 38400 to 115200.

This version adds the following trace record:

QS_QF_TIMEEVT_CTR.

The version also adds compatiblity with 64-bit targets (such as 64-bit linux). This version can accept 8-byte pointers (both object pointers and function pointers) as well as 64-bit integers sent in user-defined trace records.

This version also adds the hex format for uint32_t integers sent in user-defined trace records.

Finally, this version adds a command-line option -v to specify the corresponding QP version running on the target. The default version is -v4.2, but specifying version -v4.1 or -v4.0 will switch QSPY into backwards-compatibility mode with the earlier versions of QP.



@section qtools_4_1_06 Version 4.1.06, 2011-02-09
This is the initial standalone release of the QSPY host pplication.
QSPY is still available in the QP/C and QP/C++ distributions, but
other rapid prototyping platforms (such as mbed or Arduino) do not
use the standard QP distributions and have no easy access to the
QSPY tool. For these users, this pre-compiled standalone release
is more convenient.

*/
