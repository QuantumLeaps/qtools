/*! @page qwin QWin&trade; GUI Prototyping Toolkit

![QWin GUI Prototyping Toolkit](qwin_banner.jpg)

When developing embedded code for devices with non-trivial user interfaces, it often pays off to build a prototype (virtual prototype) of the embedded system on a PC. The strategy is called "dual targeting", because you develop software on one machine (e.g., Windows PC) and run it on a deeply embedded target, as well as on the PC. Dual targeting is the main strategy for avoiding the "target system bottleneck" in the agile embedded software development.

@note
Please note that dual targeting does not mean that the embedded device has anything to do with the PC or Windows. Neither does it mean that the simulation must be cycle-exact with the embedded target CPU. Instead, dual targeting simply means that from day one, your embedded code (typically in C or C++) is designed to run on at least two platforms: the final target hardware and your PC. All you really need for this is two C/C++ compilers: one for the PC and another for the embedded device.


<h1>QWin&trade; GUI Prototyping Toolkit</h1>
<strong>QWin&trade;</strong> is a free GUI toolkit for prototyping embedded systems on Windows in the C or C++ programming language, including building realistic embedded front panels consisting of LCD displays (both graphic and segmented), LEDs, buttons, knobs, sliders, etc. The implementation is based on the **raw Win32 API** to provide simple <b>direct mapping to C/C++</b> for easy integration with your embedded code.

@image html qwin_ani.gif "Example of a QWIN Prototype with graphic LCD, buttons, LEDs, and segmented display"
<br>

@remark
The problem of building GUI prototypes of embedded devices on the desktop is very common, yet it seems that most developers try to use C#, .NET, VisualBasic or other such environments to build prototypes of their embedded devices. The main shortcoming of all such solutions is that they don't provide direct binding to C/C++, which complicates the build process and the **debugging of the C/C++ code** on the host.



@section qwin_usage QWin&trade; Usage
<b>QWin&trade;</b> is included in the QTools&trade; Collection in the sub-directory <span class="img folder">qtools/qwin/</span> and consists of just two files: qwin_gui.h containing the interface and qwin_gui.c providing the implementation. You use QWin&trade; by including these files in your projects.

@note
<b>QWin&trade;</b> is also already included in the [QP/C](https://www.state-machine.com/qpc/), [QP/C++](https://www.state-machine.com/qpcpp/), and [QP-nano](https://www.state-machine.com/qpn/) frameworks (in the `<qp>\ports\win32` and `<qp>\ports\win32-qv` directories), so if you use any of these frameworks, you don't need to include QWin&trade; from the QTools Collection.



@section qwin_features QWin&trade; Features
Currently QWin&trade; provides the following facilities:

- Graphic displays (pixel-addressable) such as graphical LCDs, OLEDs, etc. with up to 24-bit color.
- Segmented displays such as segment LCDs, and segment LEDs with generic custom bitmaps for
the segments.
- Owner-drawn buttons with custom “depressed” and “released” bitmaps and capable of generating
separate events when depressed and when released.
Additionally, the provided code shows how to handle input sources:
- Keyboard events.
- Mouse move events and mouse-wheel events.



@section qwin_doc QWin&trade; Documentation
The QWin&trade; GUI Prototyping Toolkit is described in the Application Note: <a href="https://www.state-machine.com/doc/AN_QWin-GUI.pdf" target="_blank" class="extern"><b>Application Note: QWIN GUI Kit for Prototyping Embedded Systems on Windows</b></a>.

![AppNote: QWin GUI Prototyping Toolkit](qwin_an.png)
@caption{Application Note: QWIN GUI Kit for Prototyping Embedded Systems on Windows}


Regarding the size and complexity of the “QWin&trade; GUI Toolkit“, the implementation of the aforementioned GUI elements takes only about 250 lines of C. The example with all sources of input and a lot of comments amounts to some 300 lines of C. The toolkit has been tested with the free MinGW compiler (included in the @ref qtools_win "QTools&trade; Collection for Windows"), the free <a href="https://www.visualstudio.com/vs/visual-studio-express/" target="_blank" class="extern">Visual C++ Express</a>, and the free <a href="http://www.resedit.net/" target="_blank" class="extern">ResEdit</a> resource editor.

@nav{qview_cust,qcalc}
*/
